from typing import List

class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        if not matrix or not matrix[0]:
            return 0

        # Directions for moving in the matrix
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        
        # Function to perform DFS from a given cell
        def dfs(x, y, memo):
            if memo[x][y]:
                return memo[x][y]
            
            max_path_length = 1  # Minimum path length is 1 (the cell itself)
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < len(matrix) and 0 <= ny < len(matrix[0]) and matrix[nx][ny] > matrix[x][y]:
                    max_path_length = max(max_path_length, 1 + dfs(nx, ny, memo))
            memo[x][y] = max_path_length
            return max_path_length

        # Memoization table to store lengths of longest paths starting from each cell
        memo = [[0] * len(matrix[0]) for _ in range(len(matrix))]

        # Calculate longest path starting from each cell
        max_length = 0
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                if not memo[i][j]:  # If this cell has not been computed yet
                    max_length = max(max_length, dfs(i, j, memo))

        return max_length
