class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow = fast = head
        
        # Traverse the list with two pointers, one moving at twice the speed of the other
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        # At the end of the loop, 'slow' points to the middle node
        return slow
