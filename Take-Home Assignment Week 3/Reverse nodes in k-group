class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        def reverse_list(head, k):
            prev = None
            curr = head
            while k > 0:
                next_node = curr.next
                curr.next = prev
                prev = curr
                curr = next_node
                k -= 1
            return prev
        
        # Count the number of nodes in the list
        def count_nodes(head):
            count = 0
            curr = head
            while curr:
                count += 1
                curr = curr.next
            return count
        
        # Reverse a group of k nodes
        def reverse_group(start, end):
            prev = None
            curr = start
            while curr != end:
                next_node = curr.next
                curr.next = prev
                prev = curr
                curr = next_node
            return prev
        
        dummy = ListNode(0)
        dummy.next = head
        prev_group_end = dummy
        
        total_nodes = count_nodes(head)
        
        while total_nodes >= k:
            group_start = prev_group_end.next
            group_end = group_start
            for _ in range(k - 1):
                group_end = group_end.next
            
            next_group_start = group_end.next
            new_head = reverse_group(group_start, next_group_start)
            
            # Connect the reversed group to the rest of the list
            prev_group_end.next = new_head
            group_start.next = next_group_start
            
            # Move the pointers for the next iteration
            prev_group_end = group_start
            total_nodes -= k
        
        return dummy.next
